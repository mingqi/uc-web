<!DOCTYPE html>
<html lang="en" ng-app="consoleApp">
<head>
<title>Metric Setting - UCLogs</title>

{% include include/inhead %}
    
<script src="/s/angular/angular.min.js"></script>
<script src="/s/angular-tablesort.js"></script>
<script src="/s/xregexp-min.js"></script>
<script src="/s/moment.min.js"></script>

<link rel="stylesheet" href="/s/tablesort.css" />
<style>
.label-warning {cursor: pointer;}
.dropdown-navbar {width: 400px;}
.dropdown-navbar.dropdown-menu>li>a {white-space: normal;}
.hosts .panel-body {overflow-y: scroll; max-height: 300px}
textarea {height:70px;}
.tooltip-inner {
    max-width: 500px;
    text-align: left;
}
select.red {
    color: red;
    font-size: 20px;
    border-color: red;
}
</style>

<script>
var setMonitor = function($scope, monitor) {
    $scope.monitors = $scope.monitors || [];
    if (!_.some($scope.monitors, function(old, i) {
        if (old._id === monitor._id) {
            $scope.monitors.splice(i, 1, monitor);
            return true;
        }
    })) {
        // new
        $scope.monitors.push(monitor);
    }
};
var deleteMonitor = function($scope, monitor) {
    $scope.monitors = $scope.monitors || [];
    $scope.monitors = _.reject($scope.monitors, function(old) {
        return old._id === monitor._id;
    });
};
var monitorTypesConfig = {
    log : {
        type : 'log',
        icon: 'fa fa-file-text-o',
        typeName : 'Watch Log Files',
        description: 'Watch log files. Extract, collecting, statistics and measure data from log files in real-time.',
        step1tips: 'Please choose the hosts where your log file located. You need install a agent on you host in case of not appear in list. “Add Host” link will guide you painlessly install agent.',
        step2tips: 'Specify your logs information here. Host Agent will watch logs, extract information and metrics it.',
        multiHost: true,
        props : [{
            name : 'Path',
            key : 'path',
            type : 'text',
            placeholder: 'glob pattern supported, e.g. /var/log/web.*.log',
            require : true
        }, {
            name : 'Metrics Type',
            key : 'metricsType',
            type : 'select',
            require: true,
            options : [{
                type : "counting",
                name : "Counting (count events)",
            }, {
                type : 'timing',
                name : 'Timing (measure the average and count for a set of values)',
            }, {
                type: 'gauge',
                name: 'Gauge (measure the value of a particular thing over time)'
            }],
            helplink: '/en/help/log-metrics#metricsTypes'
        }, {
            name : 'Regex pattern',
            key : 'pattern',
            type : 'textarea',
            require : true,
            helplink: '/en/help/log-metrics#pattern'
        }, {
            name: 'Time Format',
            key: 'timeFormat',
            placeholder: 'Optional, when you use ISO-8601 string',
            type: 'text',
            helplink: '/en/help/log-metrics#timestamp'
        }, {
            name: 'Validate',
            type: 'button',
            text: 'Validate regex pattern',
            onclick: function() {
                var $scope = angular.element($(document.body)).scope();
                var propMap = _.indexBy($scope.currentConfig.props, 'key');
                $scope.testingRegex = {
                    testString: propMap.testString.value,
                    pattern: propMap.pattern.value,
                    timeFormat: propMap.timeFormat.value
                };

                $('#modal-test-regex').modal({
                    backdrop: 'static'
                });
            }
        }, {
            key: 'testString',
            hide: true
        }]
    },
    dbquery : {
        type : 'dbquery',
        typeName : 'Database Query',
        description: 'Periodically execute your input query statements on a database, read back the result and metric it. Support Mysql, Postgre, SQL Server, Oracle and Mongo DB.',
        step1tips: 'Please choose the host where to execute your query statement. You need install a agent on you host in case of not appear in list. "Add Host" link will guide you painlessly install agent.',
        step2tips: 'Specify your database and query statement information here. Host Agent will periodically (30 seconds) execute it, read back the result and measure it.',
        icon: 'fa fa-database',
        props : [{
            name : 'Database Type',
            key : 'dbType',
            type : 'select',
            init: function() {
                var $scope = angular.element($(document.body)).scope();
                var propMap = _.indexBy($scope.currentConfig.props, 'key');

                // sid
                propMap.sid.hide = propMap.dbType.value !== 'oracle';
            },
            onchange: function() {
                var $scope = angular.element($(document.body)).scope();
                var propMap = _.indexBy($scope.currentConfig.props, 'key');
                
                // sid
                propMap.sid.hide = propMap.dbType.value !== 'oracle';

                // port
                var option = _.indexBy(propMap.dbType.options, 'type')[propMap.dbType.value];
                propMap.port.value = option && option.defaultPort || '';
            },
            options : [{
                type : "mysql",
                name : "Mysql",
                defaultPort : 3306
            }, {
                type : 'oracle',
                name : 'Oracle',
                defaultPort : 1521
            }, {
                type : 'mssql',
                name : 'Ms Sql Server',
                defaultPort : 1433
            }, {
                type : 'postgresql',
                name : 'Postgre Sql',
                defaultPort: 5432
            }, {
                type : 'mongo',
                name : 'Mongodb',
                defaultPort : 27017
            }],
            require : true
        }, {
            name : 'DB host',
            key : 'host',
            type : 'text',
            require : true
        }, {
            name : 'Port',
            key : 'port',
            type : 'text',
            pattern: /^\d+$/,
            require : true
        }, {
            name: 'SID',
            key: 'sid',
            type: 'text',
            require: true,
            hide: true
        }, {
            name : 'Database',
            key : 'database',
            type : 'text',
            require : true
        }, {
            name : 'User',
            key : 'user',
            type : 'text',
        }, {
            name : "Password",
            key : 'pwd',
            type : 'password',
        }, {
            name : 'Query',
            key : 'query',
            type : 'textarea',
            require : true,
            tooltip: 'Agent Host will periotically (current is 30 seconds) execute the query ( SQL query or Mongo Query), read back the result and measure it. The query’s result must be only one field and result is numeric. Look like this: <br/>select count(*) from orders where status = ‘pending’.<br/><br/>Mongo query should be a valid query which can be executed on mongo shell, look like this:<br/>db.orders.find({status: ‘pending’}).count()'
        }]
    },
    script : {
        type : 'script',
        icon: 'fa fa-terminal',
        typeName : 'Command',
        description: 'Periodically run shell command in your host, read back the result and metric it. For example, you can use command ‘ls -1 /you/path/ | wc -l’ to metric and monitor how much files are under directory.',
        step1tips: 'Please choose the host where to run you shell command. You need install a agent on you host in case of not appear in list. "Add Host" link will guide you painlessly install agent.',
        step2tips: 'Specify shell command here. Host Agent will periodically (30 seconds) execute it, read back the command’s output and measure it.',
        props : [{
            name : 'Shell',
            key : 'command',
            type : 'text',
            require : true,
            tooltip: 'You can input any execrable shell command here. The only constraint is command’s output must be a numberic.'
        }]
    }
};
var getOriginConfig = function(type) {
    var config = monitorTypesConfig[type];
    var results = {};
    _.each(config, function(value, key) {
        if (_.isArray(value)) {
            results[key] = _.map(value, function(one) {
                return _.clone(one);
            });
        } else {
            results[key] = _.clone(value);
        }
    });
    return results;
};
angular.module('consoleApp', ['tableSort'])
.controller('Ctrl', ['$scope', '$http', '$location', function($scope, $http, $location) {
    var changingTab;
    $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    $scope.monitorTypesConfig = monitorTypesConfig;
    $scope.monitorTypes = _.values(monitorTypesConfig);
    $scope.page = {};
    $scope.platforms = [{
        key: 'redhat',
        name: 'Red Hat or CentOS'
    }, {
        key: 'debian',
        name: 'Ubuntu or Debian'
    }, {
        key: 'linux',
        name: 'Others linux'
    }];

    var venderPage = function() {
        var locationSearch = $location.search();
        if (locationSearch.id) {
            // change tab
            if (changingTab) {
                $scope.currentConfig.tab = locationSearch.tab;
                changingTab = false;
                return;
            }

            // edit monitor
            var monitor = _.indexBy($scope.monitors, '_id')[locationSearch.id];
            if (!monitor) {
                return;
            }
            var c = _.extend(getOriginConfig(monitor.type), {
                _id : monitor._id,
                name : monitor.name,
                description: monitor.description,
                errors: {},
                tab : locationSearch.tab || 'config'
            });
            _.each(c.props, function(prop) {
                prop.value = monitor.config[prop.key];
            });
            $scope.currentConfig = c;
            $scope.page = {
                 status : 'setting',
                 operation : 'edit'
            };
            showHosts(monitor.hosts);
        } else if (locationSearch.operation == 'add') {
            // add monitor
            $scope.currentConfig = _.extend(getOriginConfig(locationSearch.type), {
                step: 1,
                description: '', // override type description
                errors: {}
            });
            $scope.page = {
                status : 'setting',
                operation : 'add'
            };
            showHosts();
        } else {
            $scope.page.status = 'list';
        }
    };

    $scope.refreshMonitors = function() {
        ma.wait();
        $http.get('/console/ajax/getMonitors').success(function(monitors) {
            $scope.monitors = [];
            _.each(monitors, function(monitor) {
                setMonitor($scope, monitor);
            });
            ma.done();
        }).error(function(json) {
            ma.done();
            alert(json.error || 'get monitors error');
        });
    };
    $http.get('/console/ajax/getMonitors').success(function(monitors) {
        _.each(monitors, function(monitor) {
            setMonitor($scope, monitor);
        });
        $scope.page.status = 'list';
        venderPage();
        $scope.$on('$locationChangeSuccess', venderPage);
    }).error(function(json) {
        alert(json.error || 'get monitors error');
    });
    
    var showHosts = function(selectedHosts, refresh) {
        var readyHosts = function(callback) {
            if ($scope.hosts && !refresh) {
                return callback(null);
            }
            ma.wait();
            $http.get('/console/ajax/getHosts').success(function(hosts) {
                $scope.hosts = hosts;
                ma.done();
                callback(null);
            }).error(function(json) {
                ma.done();
                callback('error');
            });
        };

        readyHosts(function(error) {
            if (error) return;
            selectedHosts = selectedHosts || _.chain($scope.currentConfig.hosts).filter(function(host) {
                return host.selected;
            }).map(function(host) {
                return host.hostname;
            }).value();
            $scope.currentConfig.hosts = _.map($scope.hosts, function(host) {
                return {
                    hostname : host.hostname,
                    selected : _.contains(selectedHosts, host.hostname),
                    isActive: host.isActive
                };
            });
        });
    };
    $scope.newMonitor = function(type) {
        $location.search('operation', 'add').search('type', type);
    };
    var showMonitorList = function() {
        _.each($location.search(), function(value, key) {
            $location.search(key, null);
        });
    };
    $scope.changeTab = function(tab) {
        if ($location.search().tab === tab) {
            return;
        }
        changingTab = true;
        $location.search('tab', tab);
    };
    $scope.cancel = function() {
        showMonitorList();
    };
    $scope.validateHosts = function() {
        var selectedHosts = _.chain($scope.currentConfig.hosts).filter(function(host) {
            return host.selected;
        }).map(function(host) {
            return host.hostname;
        }).value();
        if (!selectedHosts.length) {
            return false;
            // return alert('You have not selected any host');
        }
        $scope.currentConfig.selectedHosts = selectedHosts;
        return true;
    };
    $scope.toStep = function(to) {
        if (to == 0) {
            return $scope.cancel();
        } else if (to == 3) {
            return $scope.submit();
        }
        if (to == 2 && !$scope.validateHosts()) {
            return;
        }
        $scope.currentConfig.step = to;
    };
    $scope.editMonitor = function(monitor) {
        $location.search('id', monitor._id);
    };
    $scope.refreshHosts = function() {
        showHosts(null, true);
        $.scrollTo('body', 500);
    };
    $scope.validateConfig = function(member) {
        var result = true;
        var firstErrorProp;
        if (member == 'name' || !member) {
            if (!$scope.currentConfig.name) {
                result = false;
                firstErrorProp = firstErrorProp || 'name';
                $scope.currentConfig.errors.name = "Please provide a valid name";
            } else {
                $scope.currentConfig.errors.name = null;
            }
        }
        _.each($scope.currentConfig.props, function(prop) {
            if (member == prop.key || !member) {
                var propIsOk = true;
                if (prop.require && !prop.value && !prop.hide) {
                    propIsOk = false;
                } else if (prop.value && prop.pattern) {
                    if (!(prop.value + "").match(prop.pattern)) {
                        propIsOk = false;
                    }
                }

                if (propIsOk) {
                    $scope.currentConfig.errors[prop.key] = null;
                } else {
                    result = false;
                    $scope.currentConfig.errors[prop.key] = "Please provide a valid " + prop.name;
                    firstErrorProp = firstErrorProp || prop.key;
                }
            }
        });
        if (!member && !result) {
            $(document.body).scrollTo('#config_' + firstErrorProp, 500);
        }
        return result;
    };
    $scope.submit = function() {
        if (!$scope.validateHosts()) {
            if ($scope.currentConfig._id) {
                $scope.changeTab('hosts');
            }
            return;
        }
        if (!$scope.validateConfig()) {
            if ($scope.currentConfig._id) {
                $scope.changeTab('config');
            }
            return;
        }
        var config = {};
        _.each($scope.currentConfig.props, function(prop) {
            if (prop.key && prop.value) {
                config[prop.key] = prop.value;
            }
        });
        var monitor = {
            _id : $scope.currentConfig._id,
            name : $scope.currentConfig.name,
            description : $scope.currentConfig.description,
            type : $scope.currentConfig.type,
            hosts : $scope.currentConfig.selectedHosts,
            config : config
        };
        ma.wait();
        $http.post('/console/ajax/upsertMonitor', {
            monitor : monitor
        }).success(function(monitor) {
            setMonitor($scope, monitor);
            showMonitorList();
            ma.done();
        }).error(function(json) {
            if (json.error) {
                alert(json.error);
            }
            ma.done();
        });
    };
    $scope.deleteMonitor = function(monitor) {
        if (!confirm('Confirm to remove monitor : ' + monitor.name)) {
            return;
        }
        ma.wait();
        $http.post('/console/ajax/deleteMonitor', {
            id : monitor._id
        }).success(function(json) {
            deleteMonitor($scope, monitor);
            ma.done();
        }).error(function(json) {
            if (json.error) {
                alert(json.error);
            }
            ma.done();
        });
    };
    $scope.testRegex = function() {
        var xr = XRegExp($scope.testingRegex.pattern, "m");

        var match = XRegExp.exec($scope.testingRegex.testString, xr);
        var result = $scope.testingRegex.result = {
            match: match
        };
        if (!match) {
            return;
        }
        var momentObj;
        if (match.time) {
            if ($scope.testingRegex.timeFormat) {
                momentObj = moment(match.time, $scope.testingRegex.timeFormat);
            } else {
                momentObj = moment(match.time);
            }
            result.momentObj = momentObj;
        }
        if (match.value) {
            result.valueObj = {
                isValid: !isNaN(match.value)
            }
        }
    };
    $scope.useRegex = function() {
        _.each($scope.currentConfig.props, function(prop) {
            if (prop.key == 'pattern') {
                prop.value = $scope.testingRegex.pattern;
            } else if (prop.key == 'timeFormat') {
                prop.value = $scope.testingRegex.timeFormat;
            } else if (prop.key == 'testString') {
                prop.value = $scope.testingRegex.testString;
            }
        });
        $('#modal-test-regex').modal('hide');
    }
    $scope.selectSingleHost = function(host) {
        _.each($scope.currentConfig.hosts, function(one) {
            one.selected = one.hostname === host.hostname;
        });
    };
    $scope.addNewHost = function() {
        $scope.page.showAgent = true;
        setTimeout(function() {
            $.scrollTo('#selectPlatform', 500);
        }, 100);
    }
    $scope.tooltip = function($event) {
        var $target = $($event.target);
        if (!$target.attr('data-original-title')) {
            $target.tooltip();
            setTimeout(function() {
                $target.trigger('mouseover');
            }, 100);
        }
    }
}]);
</script>
</head>

<body ng-controller="Ctrl">
{% include include/navbar %}
<div class="main-container" id="main-container">
    <script type="text/javascript">
        try{ace.settings.check('main-container' , 'fixed')}catch(e){}
    </script>

    <div class="main-container-inner">
        <a class="menu-toggler" id="menu-toggler">
            <span class="menu-text"></span>
        </a>

        {% include include/siderbar %}

        <div class="main-content">
            <div class="page-content">
                <div class="row">
                    <div class="col-xs-12">
                        <!-- PAGE CONTENT BEGINS -->
                        <div ng-include="'newButton'" ng-if="page.status == 'list'"></div>
                        <div ng-include="'setting'" ng-if="page.status == 'setting'"></div>
                        <div class="space-8"></div>
                        <div ng-include="'monitors'" ng-if="page.status == 'list'"></div>
                        <!-- PAGE CONTENT ENDS -->
                    </div><!-- /.col -->
                </div><!-- /.row -->
            </div><!-- /.page-content -->
        </div><!-- /.main-content -->

    </div><!-- /.main-container-inner -->

    <a id="btn-scroll-up" class="btn-scroll-up btn btn-sm btn-inverse">
        <i class="icon-double-angle-up icon-only bigger-110"></i>
    </a>
</div><!-- /.main-container -->

<script type="text/ng-template" id="newButton">
<div class="btn-group">
    <button data-toggle="dropdown" class="btn btn-info dropdown-toggle">
         <i class="fa fa-plus"></i>
         Create a new Metric
         <i class="icon-angle-down icon-on-right"></i>
     </button>
     <ul class="pull-left dropdown-navbar dropdown-menu dropdown-caret dropdown-close">
        <li ng-repeat="monitorType in monitorTypes">
            <a ng-click="newMonitor(monitorType.type)">
                <h4>
                    <i class="{{monitorType.icon}}" ng-if="monitorType.icon"></i>
                    {{monitorType.typeName}}
                </h4>
                {{monitorType.description}}
            </a>
        </li>

        <li class="hide">
        </li>
    </ul>
    <a ng-click="refreshMonitors()">
        <i class="fa fa-refresh" title="refresh monitors"
        style="margin: 10px 0 0 12px; font-size: 20px; cursor:pointer"></i>
    </a>
</div>

<div class="nav-search">
        <span class="input-icon">
            <input type="text" placeholder="Search metric" class="nav-search-input" ng-model="page.searchMonitor" />
            <i class="icon-search nav-search-icon"></i>
        </span>
</div>
</script>

<script type="text/ng-template" id="setting">
<div ng-if="currentConfig._id">
    <div class="widget-box transparent">
        <div class="widget-header">
            <h3 class="lighter">
                {{currentConfig.name}} &nbsp;
                <a href="/console/metric?monitorId={{currentConfig._id}}"><i class="fa fa-bar-chart-o"></i></a>

            </h3>

            <div class="widget-toolbar no-border">
                <ul class="nav nav-tabs" id="recent-tab">
                    <li ng-class="{active : currentConfig.tab == 'hosts'}">
                        <a ng-click="changeTab('hosts')">Select host(s)</a>
                    </li>
                    <li ng-class="{active : currentConfig.tab == 'config'}">
                        <a ng-click="changeTab('config')">Set config</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="space-16"></div>
</div>

<div ng-if="!currentConfig._id">
    <h4> Add a new {{currentConfig.typeName}} Metric </h4>
    <div id="fuelux-wizard" class="row-fluid" data-target="#step-container" style="margin:30px 0">
        <ul class="wizard-steps">
            <li class="active">
                <span class="step">1</span>
                <span class="title">Select host(s)</span>
            </li>

            <li ng-class="{active : currentConfig.step >= 2}">
                <span class="step">2</span>
                <span class="title">Set config</span>
            </li>

            <li>
                <span class="step">3</span>
                <span class="title">Finish</span>
            </li>
        </ul>
    </div>
    <hr/>
</div>

<div class="form-horizontal">
    <div ng-if="currentConfig.step==1 || currentConfig.tab=='hosts'">
        <div class="row hosts">
            <div class="col-sm-10 col-sm-offset-1" style="padding:0 12px">
                <div class="alert alert-info">{{currentConfig.step1tips}}</div>
            </div>

            <div class="col-sm-5 col-sm-offset-1">

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Available hosts &nbsp;
                            <i class="fa fa-refresh" ng-click="refreshHosts()" style="cursor:pointer" title="refresh hosts"></i>
                        </h3>
                        <div class="nav-search" ng-if="currentConfig.hosts.length > 2">
                            <span class="input-icon">
                                <input type="text" placeholder="Search hosts" class="nav-search-input" ng-model="currentConfig.searchHosts" />
                                <i class="icon-search nav-search-icon"></i>
                            </span>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="checkbox" ng-if="!currentConfig.hosts.length">
                            Your havn't any host.
                        </div>
                        <div ng-repeat="host in currentConfig.hosts | filter:currentConfig.searchHosts">
                            <label>
                                <input name="form-field-checkbox" type="checkbox" class="ace" ng-model="host.selected" ng-if="currentConfig.multiHost" />
                                <input name="form-field-checkbox" type="radio" class="ace" ng-if="!currentConfig.multiHost" ng-click="selectSingleHost(host)" ng-checked="host.selected"/>
                                <span class="lbl">
                                    {{host.hostname}}
                                    <span class="text-danger" ng-if="!host.isActive">(inactive)</span>
                                </span>
                            </label>
                        </div>
                        <div style="margin: 10px 0 0 0">
                            <a ng-click="addNewHost()">Add a new host</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-5" ng-init="searchSelectedHost={selected:true}">
                <div class="panel panel-success" ng-class="
                    {'panel-danger': (currentConfig.hosts|filter:searchSelectedHost).length==0}
                ">
                    <div class="panel-heading">
                        <h3 class="panel-title">Selected hosts</h3>
                    </div>
                    <div class="panel-body">
                        <div ng-repeat="host in currentConfig.hosts">
                            <label ng-if="host.selected">
                                <input name="form-field-checkbox" type="checkbox" class="ace" ng-model="host.selected" />
                                <span class="lbl">
                                    {{host.hostname}}
                                    <span class="text-danger" ng-if="!host.isActive">(inactive)</span>
                                </span>
                            </label>
                        </div>

                        <div class="has-error" ng-if="(currentConfig.hosts|filter:searchSelectedHost).length==0">
                            <div class="help-block">You haven't select any host</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group" ng-if="page.showAgent">
            <hr/>
            <label class="col-sm-3 control-label no-padding-right">
                Add host:<br>
                <a ng-click="page.showAgent = false">(Hide)</a>
            </label>
            <div class="col-sm-8">
                <div style="padding-left:20px" id="selectPlatform">
                    <div class="form-group" style="margin-left:0; margin-right:0"
                            ng-class="{'has-error': !page.platform}">
                        <select style="font-size:20px" ng-model="page.platform"
                                ng-options="platform.key as platform.name for platform in platforms">
                            <option value="">Select your platform</option>
                        </select>
                    </div>
                    <div ng-if="page.platform=='debian'">
                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">1.</span> 
                            <span style="margin-left:10px">Add yum repository</span>
                        </h4>
                        <p>Configure the New Relic apt repository:</p>
                        <div class="well well-sm">sudo sh -c "echo deb http://apt.uclogs.com/ stable main >> /etc/apt/sources.list.d/metricsat.list"</div>
                        <p>Trust the key:</p>
                        <div class="well well-sm">wget -O- http://apt.uclogs.com/metricsat-apt-repo.gpg | sudo apt-key add -</div>
                        <p>Update the local package list:</p>
                        <div class="well well-sm">sudo apt-get update</div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">2.</span> 
                            <span style="margin-left:10px">Install the Host Agent package</span>
                        </h4>
                        <div class="well well-sm">sudo apt-get install ma-agent</div>
                    </div>
                    <div ng-if="page.platform=='redhat'">
                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">1.</span> 
                            <span style="margin-left:10px">Add yum repository</span>
                        </h4>
                        <div class="well well-sm">curl -L http://download.uclogs.com/shell/install_yum_repo.sh | sh</div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">2.</span> 
                            <span style="margin-left:10px">Install the Host Agent package</span>
                        </h4>
                        <div class="well well-sm">sudo yum install ma-agent</div>
                    </div>

                    <div ng-if="page.platform=='redhat' || page.platform=='debian'">
                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">3.</span> 
                            <span style="margin-left:10px">Configure & start the Host Agent daemon</span>
                        </h4>
                        <p>Set license key: /etc/ma-agent/ma-agent.conf:</p>
                        <div class="well well-sm">sudo /opt/ma-agent/bin/license-key --set {%- visitor.licenseKey %}</div>
                        <p>Start daemon:</p>
                        <div class="well well-sm">sudo /etc/init.d/ma-agent start</div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">4.</span> 
                            <span style="margin-left:10px">That’s it. Refresh the hosts list.</span>
                        </h4>
                        <p>In the few seconds your host will appear in the host list. If you are not seeing host in 30 seconds, or you are having other installatiion issues. You can get help by support@uclogs.com</p>
                        <a ng-click="refreshHosts()">Refresh the hosts</a>
                    </div>
                    <div ng-if="page.platform=='linux'">
                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">1.</span> 
                            <span style="margin-left:10px">Download & unzip the latest release</span>
                        </h4>
                        <p>Download the latest release from: <a target="_blank" href="http://download.uclogs.com/ma-agent/release">http://download.uclogs.com/ma-agent/release</a>
                            <br/>Unzip the software:
                        </p>
                        <div class="well well-sm">tar -xzvf ma-agent-&lt;version&gt;.tar.gz</div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">2.</span> 
                            <span style="margin-left:10px">Copy files to a reasonable location (e.g. /opt/ma-agent)</span>
                        </h4>
                        <div class="well well-sm">
                            sudo mkdir -p /opt/ma-agent<br>
                            sudo cp -r ma-agent-&lt;version&gt;/* /opt/ma-agent/
                        </div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">3.</span> 
                            <span style="margin-left:10px">Setup config</span>
                        </h4>
                        <p>copy configuration files</p>
                        <div class="well well-sm">
                            sudo mkdir -p /etc/ma-agent<br/>
                            sudo cp -r  /opt/ma-agent/res/etc/ma-agent/* /etc/ma-agent/
                        </div>

                        <p>Set license key</p>
                        <div class="well well-sm">sudo /opt/ma-agent/bin/license-key --set {%- visitor.licenseKey %}</div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">4.</span> 
                            <span style="margin-left:10px">Install startup scripts (Optional)</span>
                        </h4>
                        <p>UCLogs provides the RedHat and Debian startup scripts as a base for your own startup scripts. Edit the scripts as needed, and then copy them to the appropriate location on your system; for example, /etc/init.d. Be sure to run any commands required to ensure the server monitor restarts after a system shutdown.
                        </p>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">5.</span> 
                            <span style="margin-left:10px">Start the Host Agent daemon</span>
                        </h4>
                        <p>Use your startup scripts, e.g.:</p>
                        <div class="well well-sm">
                            /etc/init.d/ma-agent start
                        </div>

                        <p>or start ma-agent daemon from command line:</p>
                        <div class="well well-sm">
                            sudo /opt/ma-agent/bin/ma-agent start -s
                        </div>

                        <h4>
                            <span class="label label-primary arrowed-right" style="float:left;">6.</span> 
                            <span style="margin-left:10px">That’s it. Refresh the hosts list.</span>
                        </h4>
                        <p>In the few seconds your host will appear in the host list. If you are not seeing host in 30 seconds, or you are having other installatiion issues. You can get help by support@uclogs.com</p>
                        <a ng-click="refreshHosts()">Refresh the hosts</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div ng-if="currentConfig.step==2 || currentConfig.tab=='config'">
        <div class="col-sm-10 col-sm-offset-1" style="padding:0 12px">
                <div class="alert alert-info">{{currentConfig.step2tips}}</div>
            </div>
        <div class="form-group" ng-class="{'has-error': currentConfig.errors.name}" id="config_name">
            <label class="col-sm-3 control-label no-padding-right">Metric Name</label>
            <div class="col-sm-9">
                <div class="clearfix">
                    <input type="text" ng-model="currentConfig.name" ng-blur="validateConfig('name')" class="col-xs-10 col-sm-7" />
                    <span class="col-xs-2 col-sm-5">(*)</span>
                </div>
                <div class="help-block" ng-if="currentConfig.errors.name">{{currentConfig.errors.name}}</div>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-3 control-label no-padding-right">Description</label>
            <div class="col-sm-9">
                <input type="text" ng-model="currentConfig.description" class="col-xs-10 col-sm-7" />
            </div>
        </div>
        <div ng-repeat="prop in currentConfig.props">
            <div class="form-group" ng-class="{'has-error': currentConfig.errors[prop.key]}" id="config_{{prop.key}}" ng-hide="prop.hide">
                <label class="col-sm-3 control-label no-padding-right">
                    {{prop.name}}
                    <a ng-href="{{prop.helplink}}" target="_blank" ng-if="prop.helplink">(?)</a>
                    <a data-toggle="tooltip" data-placement="top" data-html="true" title="{{prop.tooltip}}" ng-if="prop.tooltip" ng-mouseover="tooltip($event)" data-container="body">(?)</a>
                </label>
                <div class="col-sm-9">
                    <div class="clearfix">
                        <input type="text" ng-model="prop.value" class="col-xs-10 col-sm-7" ng-if="prop.type=='text'" ng-blur="validateConfig(prop.key)" placeholder="{{prop.placeholder}}"/>
                        <input type="password" ng-model="prop.value" class="col-xs-10 col-sm-7" ng-if="prop.type=='password'" ng-blur="validateConfig(prop.key)"/>
                        <textarea ng-model="prop.value" class="col-xs-10 col-sm-7" ng-if="prop.type=='textarea'" ng-blur="validateConfig(prop.key)"></textarea>
                        <select ng-model="prop.value" class="col-xs-10 col-sm-7"
                            ng-options="opt.type as opt.name for opt in prop.options"
                            ng-if="prop.type=='select'"
                            ng-change="validateConfig(prop.key); prop.onchange && prop.onchange()"
                            ng-init="prop.init && prop.init()">
                            <option value="">Please select</option>
                        </select>
                        <button ng-if="prop.type=='button'" ng-click="prop.onclick && prop.onclick()" class="btn btn-inverse btn-xs">
                            {{prop.text}}
                        </button>
                        <span ng-if="prop.require" class="col-xs-2 col-sm-5">(*)</span>
                    </div>
                    <div class="help-block" ng-if="currentConfig.errors[prop.key]">{{currentConfig.errors[prop.key]}}</div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-actions center" ng-if="!currentConfig._id">
        <button class="btn btn-sm btn-prev" ng-click="toStep(currentConfig.step - 1)">
            <i class="icon-arrow-left"></i>
            <span ng-if="currentConfig.step==1">Cancel</span>
            <span ng-if="currentConfig.step>1">Prev</span>
        </button>
        &nbsp; &nbsp; &nbsp; &nbsp;
        <button class="btn btn-sm btn-success btn-next" ng-click="toStep(currentConfig.step + 1)">
            <span ng-if="currentConfig.step<2">Next</span>
            <span ng-if="currentConfig.step==2">Submit</span>
            <i class="icon-arrow-right icon-on-right"></i>
        </button>
    </div>

    <div class="form-actions center" ng-if="currentConfig._id">
        <button class="btn btn-sm btn-prev" ng-click="cancel()">
            <i class="icon-arrow-left"></i>
            <span>Cancel</span>
        </button>
        &nbsp; &nbsp; &nbsp; &nbsp;
        <button class="btn btn-sm btn-success btn-next" ng-click="submit()">
            <span>Submit</span>
            <i class="icon-arrow-right icon-on-right"></i>
        </button>
    </div>
</div>
</script>

<script type="text/ng-template" id="monitors">
<table class="table table-striped table-bordered table-hover" ts-wrapper>
    <thead>
        <tr>
            <th ts-criteria="name">Name</th>
            <th ts-criteria="type">Type</th>
            <th ts-criteria="hosts">Host(s)</th>
            <th>Operation</th>
        </tr>
    </thead>
    <tbody>
        <tr ng-repeat="monitor in monitors | filter:page.searchMonitor | orderBy:'name'" ts-repeat>
            <td>
                <a href="/console/metric?monitorId={{monitor._id}}">
                    {{monitor.name}}</a>
                <label ng-if="monitor.status=='problem'" class="dropdown">
                    <i class="fa fa-exclamation-triangle dropdown-toggle" data-toggle="dropdown" style="color:#f89406; cursor:pointer"></i>
                    <ul class="pull-left dropdown-navbar dropdown-menu dropdown-caret dropdown-close" style="width: 260px" ng-if="monitor.problems.length">
                         <li ng-repeat="problem in monitor.problems">
                         <a>
                             <h4>{{problem.host}}</h4>
                             <div style="margin:0 0 0 20px">{{problem.message}}
                             <br/>--{{problem.lastReportDate | date:'yyyy-MM-dd HH:mm:ss'}}</div>
                             </a>
                         </li>
                         <li class="hide"></li>
                    </ul>
                </label>
            </td>
            <td><i class="{{monitorTypesConfig[monitor.type].icon}}"></i> {{monitorTypesConfig[monitor.type].typeName}}
            </td>
            <td>
                <div ng-repeat="host in monitor.hosts">{{host}}</div>
            </td>
            <td>
                <div class="btn-group">
                    <button class="btn btn-xs btn-info" ng-click="editMonitor(monitor)">
                        <i class="icon-edit bigger-120"></i>
                    </button>

                    <button class="btn btn-xs btn-danger" ng-click="deleteMonitor(monitor)">
                        <i class="icon-trash bigger-120"></i>
                    </button>
                </div>
            </td>
        </tr>
    </tbody>
</table>
</script>
<div id="modal-date-format" class="modal fade" tabindex="-1"></div>

<div id="modal-test-regex" class="modal fade" tabindex="-1">
    <div class="modal-dialog" style="width:90%">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title">Validate regex pattern</h4>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label>Regex pattern</label>
                    <textarea class="form-control" ng-model="testingRegex.pattern"></textarea>
                </div>
                <div class="form-group">
                    <label>Time format</label>
                    <input class="form-control" type="text" ng-model="testingRegex.timeFormat" placeholder="Optional, when you use ISO-8601 string">
                </div>
                <div class="form-group">
                    <label>Test string (plese copy some lines from your log file)</label>
                    <input class="form-control" type="text" ng-model="testingRegex.testString">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary btn-sm" ng-click="testRegex()">Test</button>
                <button class="btn btn-primary btn-sm" ng-click="useRegex()">Use them</button>
                <button type="button" class="btn btn-default btn-sm" data-dismiss="modal">Close</button>
            </div>

            <div class="modal-body" ng-if="result = testingRegex.result">
                <h4 ng-if="result.match">Test result: Matched</h4>
                <h4 ng-if="!result.match" class="text-danger">Test result: Not matched</h4>

                <table class="table table-striped table-bordered table-hover" ng-if="result.match">
                    <thead>
                        <tr>
                            <th ng-if="result.momentObj">time</th>
                            <th ng-if="result.valueObj">value</th>
                        </tr>
                    </thead>

                    <tbody>
                        <tr>
                            <td ng-if="result.momentObj && result.momentObj.isValid()">
                                {{result.momentObj.format()}}</td>
                            <td ng-if="result.momentObj && !result.momentObj.isValid()" class="text-danger">
                                {{result.match.time}} (time is invalid)</td>
                            <td ng-if="result.valueObj && result.valueObj.isValid">
                                {{result.match.value}}</td>
                            <td ng-if="result.valueObj && !result.valueObj.isValid" class="text-danger">
                                {{result.match.value}} (value is not a number)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

{% include include/footer %}
</body>
</html>
