<!DOCTYPE html>
<html lang="en" ng-app="app">
<head>
<title>Metric - UCLogs</title>

{% include include/inhead %}

<link href="/assets/css/daterangepicker-1.3.7.css" rel="stylesheet" />

<script src="/s/angular/angular.min.js"></script>

<script>
var monitorId = '{%= monitorId %}';
var getChartConfigs = (function() {
    var aggregatorConfig = {
        default: [{
            name: 'metric',
            aggregators: ['last'],
            visibleSeries: ['last']
        }],
        log: {
            timing: [{
                name: 'count',
                aggregators: ['count'],
                visibleSeries: ['count']
            }, {
                name: 'average',
                aggregators: ['avg'],
                visibleSeries: ['avg']
            }],

            counting: [{
                name: 'count',
                aggregators: ['sum'],
                visibleSeries: ['sum']
            }]
        }
    };
    var aggs = {};
    return function(monitor) {
        if (!aggs[monitor.type]) {
            if (aggregatorConfig[monitor.type] && aggregatorConfig[monitor.type][monitor.config.metricsType]) {
                aggs[monitor.type] = aggregatorConfig[monitor.type][monitor.config.metricsType];
            } else {
                aggs[monitor.type] = aggregatorConfig.default;
            }
        }
        return aggs[monitor.type];
    }
})();
var getCharts = function(monitor) {
    return _.map(getChartConfigs(monitor), function(chartConfig) {
        return {
            id : monitor.sid + chartConfig.name.replace(/\s/g, ''),
            name : chartConfig.name,
            req: {
                metric: monitor.sid,
                aggregators: chartConfig.aggregators
            },
            visibleSeries : chartConfig.visibleSeries,
            humanName: function() {
                return 'value';
            }
        }
    });
};

angular.module('app', [])
.controller('Ctrl', ['$scope', '$http', '$location', function($scope, $http, $location) {
    $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    $scope.dateRange = $('#daterange').val();
    $http.get('/console/ajax/getMonitor?id=' + monitorId).success(function(data) {
        $scope.monitor = data;
        $scope.page = {};
        $scope.autoRefresh = true;
        $scope.charts = getCharts($scope.monitor);
        $scope.draw();
    }).error(function(json) {
        alert(json.error || 'Failed to get metric info');
    });
    
    $scope.draw = function() {
        if (isCustomerRange()) {
            $scope.autoRefresh = false;
        }
        if ($scope.dateRange.match(/^(\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}) - (\d{2}\/\d{2}\/\d{4} \d{2}:\d{2})$/)) {
            var begin = +moment(RegExp.$1);
            var end = +moment(RegExp.$2);
            _.each($scope.charts, function(chart) {
                chart.req.begin = begin;
                chart.req.end = end;
                if ($scope.page.host) {
                    chart.req.dimensions = [['host', $scope.page.host]];
                } else {
                    chart.req.dimensions = [];
                }
                if (chart.highChart) {
                    chart.highChart.showLoading();
                }
                $http.post('/console/ajax/getMetric', chart.req).success(function(data) {
                    drawChart(chart, data);
                }).error(function(json) {
                    if (json.error) {
                        alert(json.error);
                    }
                });
            });
            setAutoRefresh();
        }
    };

    $scope.changeHost = function(chart) {
        $scope.draw();
        //$('#daterange').trigger('change');
    };
    $scope.resize = function() {
        _.each($scope.charts, function(chart) {
            chart.highChart && chart.highChart.reflow();
        });
    }

    $scope.toggleAutoRefresh = function() {
        if (!isCustomerRange()) {
            $scope.autoRefresh = !$scope.autoRefresh    
        }
    };
}]);
</script>
</head>

<body ng-controller="Ctrl">
{% include include/navbar %}

<div class="main-container" id="main-container">
    <script type="text/javascript">
        try{ace.settings.check('main-container' , 'fixed')}catch(e){}
    </script>

    <div class="main-container-inner">
        <a class="menu-toggler" id="menu-toggler" href="#">
            <span class="menu-text"></span>
        </a>

        {% include include/siderbar %}

        <div class="main-content">
            <div class="page-content">
                <div class="page-header">
                 <div class="row" style="height:30px">
                     <div class="col-xs-12">
                         <div class="row">
                             <div class="col-xs-7">
                                <h1>{{monitor.name}} &nbsp;
                                    <a ng-href="/console/metrics#?id={{monitor._id}}"><i class="fa fa-pencil-square-o"></i></a>
                                </h1>
                             </div>
                             <div class="col-xs-5">
                                  <div class="input-prepend input-group pull-right" style="width:300px;">
                                     <span class="add-on input-group-addon"><i class="glyphicon glyphicon-calendar icon-calendar"></i></span>
                                     <input readonly type="text" style="width: 260px" id="daterange" ng-model="dateRange" ng-change="draw()"/>
                                     <span class="input-group-addon" data-rel="tooltip" data-placement="top" title="Auto Refresh" style="cursor: pointer" ng-click="toggleAutoRefresh()">
                                        <i class="icon-circle" ng-class="{red:!autoRefresh, green:autoRefresh}"></i>
                                     </span>
                                  </div>
                             </div>
                         </div>
                        <!-- <pre>{{charts | json}}</pre> -->
                     </div><!-- /.col -->
                 </div><!-- /.row -->

                </div><!-- /.page-header -->

                <div>
                    Description: {{monitor.description || 'None'}}
                </div>
                <div ng-if="monitor.hosts.length > 1">
                    <br>
                    Host:
                    <select ng-model="page.host"
                        ng-options="host as host for host in monitor.hosts"
                        ng-change="changeHost(chart)">
                        <option value="">All</option>
                    </select>
                </div>
                <hr/>
                <div class="row">
                    <div ng-class="{
                        'col-sm-6': charts.length > 1,
                        'col-sm-12': charts.length < 2
                    }" ng-repeat="chart in charts">
                        <div class="widget-box">
						    <div class="widget-header widget-header-flat">
						        <h5>
						            {{chart.name}}
						        </h5>
						    </div>
						
						    <div class="widget-body" id="{{chart.id}}" style="height:250px; padding:1px;">
						        <div style="font-size:20px; padding-top:20px" class="text-center">Loading...</div>
						    </div><!-- /widget-body -->
						</div><!-- /widget-box -->
                    </div>
                </div>
            </div><!-- /.page-content -->
        </div><!-- /.main-content -->

        
    </div><!-- /.main-container-inner -->

    <a href="#" id="btn-scroll-up" class="btn-scroll-up btn btn-sm btn-inverse">
        <i class="icon-double-angle-up icon-only bigger-110"></i>
    </a>
</div><!-- /.main-container -->

{% include include/footer %}

<script src="/assets/js/date-time/moment.min.js"></script>
<script src="/assets/js/date-time/daterangepicker.js"></script>
<script src="/s/highstock.js"></script>

<script>
$('[data-rel=tooltip]').tooltip({container: 'body'});

Highcharts.setOptions({
    global : {
        timezoneOffset : new Date().getTimezoneOffset()
    }
});
var drawChart = function(chart, series) {
    _.each(series, function(one) {
        one.visible = _.contains(chart.visibleSeries, one.name);
        one.name = chart.humanName(one.name);
        one.events = {
            hide : function() {
                chart.visibleSeries = _.without(chart.visibleSeries, one.name);
            },
            show : function() {
                chart.visibleSeries.push(one.name);
            }
        };
    });
    if (chart.highChart) {
        chart.highChart.destroy();
    }
    
    chart.highChart = new Highcharts.StockChart({
        chart : {
            renderTo : chart.id,
            zoomType : 'x',
            events: {
                selection: function(event) {
                    var begin = Highcharts.dateFormat('%m/%d/%Y %H:%M', event.xAxis[0].min);
                    var end = Highcharts.dateFormat('%m/%d/%Y %H:%M', event.xAxis[0].max);
                    window.chosenLabel = 'Custom Range';
                    $('#daterange').val(begin + ' - ' + end);
                    $('#daterange').trigger('change');
                }
            }
        },
        credits : {
            enabled : false
        },
        rangeSelector : {
            enabled : false
        },
        navigator : {
            enabled : false
        },
        scrollbar : {
            enabled : false
        },
        legend : {
            enabled : series.length > 1
        },
        series : series,
        tooltip: {
            valueDecimals: 0
        },
        yAxis : {
            floor : 0,
            gridLineColor: '#EEE'
        },
        plotOptions: {
            line: {
                dataGrouping: {
                    enabled: false
                }
            },
            series: {
                marker: {
                    enabled: true
                }
            }
        }
    });
};

var chosenLabel = 'Last 1 hour';
var dateFormat = 'MM/DD/YYYY HH:mm';

var isCustomerRange = function(label) {
    label = label || chosenLabel;
    return label.indexOf('Last') === -1;
};

var getDatePickerOpts = function() {
    var ranges = {
       'Last 1 hour': [moment().subtract('hour', 1), moment()],
       'Last 6 hours': [moment().subtract('hour', 6), moment()],
       'Last 1 day': [moment().subtract('day', 1), moment()],
       'Last 1 week': [moment().subtract('week', 1), moment()],
       'Last 1 month': [moment().subtract('month', 1), moment()],
       'Last 3 month': [moment().subtract('month', 3), moment()]
    };
    var result = {
        opens: 'left',
        timePicker: true,
        timePicker12Hour: false,
        timePickerIncrement: 15,
        ranges: ranges,
        format: dateFormat,
        maxDate: moment()
    };
    var scope = angular.element($("body")).scope();

    if (isCustomerRange()) {
        // start & end isn't change
        var picker = $('#daterange').data('daterangepicker');
        return _.extend(result, {
            startDate: picker.startDate,
            endDate: picker.endDate
        });
    }
    return _.extend(result, {
        startDate: ranges[chosenLabel][0],
        endDate: ranges[chosenLabel][1],
    });
};

var datePickerOpts = getDatePickerOpts();
$('#daterange').daterangepicker(datePickerOpts);

$('#daterange').on('apply.daterangepicker', function(ev, picker) {
    if (isCustomerRange() && !isCustomerRange(picker.chosenLabel)) {
        // customer -> (not customer)
        var $scope = angular.element($("body")).scope();
        $scope.autoRefresh = true;
    }
    chosenLabel = picker.chosenLabel;
    $('#daterange').trigger('change');
});

var setDateRange = function() {
    $('#daterange').val(moment(datePickerOpts.startDate).format(dateFormat) + " - "
            + moment(datePickerOpts.endDate).format(dateFormat));
    $('#daterange').trigger('apply.daterangepicker', $('#daterange').data('daterangepicker'));
};
setDateRange();

var setAutoRefresh = function() {
    if (window.refreshTimer) {
        clearInterval(window.refreshTimer);
    }
    window.refreshTimer = setInterval(function() {
        datePickerOpts = getDatePickerOpts();
        if (!datePickerOpts) {
            return;
        }
        $('#daterange').data('daterangepicker').setOptions(datePickerOpts);
        setDateRange();
    }, 1000 * 61);
};

$('#sidebar-collapse').click(function() {
    setTimeout(function() {
        angular.element('[ng-controller]').scope().resize();
    }, 50);
});
</script>
</body>
</html>
